#!/bin/bash

greenColour="\e[0;32m\033[1m"
endColour="\033[0m\e[0m"
redColour="\e[0;31m\033[1m"
blueColour="\e[0;34m\033[1m"
yellowColour="\e[1;33m\033[1m"
purpleColour="\e[0;35m\033[1m"
turquoiseColour="\e[0;36m\033[1m"
grayColour="\e[0;37m\033[1m"
whiteColour="\e[1;37m\033[1m"
blackColour="\e[0;30m\033[1m"

for i in {1..90}; do echo -ne ${grayColour}"~"${endColour}; done
echo -e "\n"
echo -e ${redColour}"  _____          _                           _____    ___    ____   " ${endColour}
echo -e ${redColour}" | ____| __  __ | |_   _ __    __ _    ___  |_   _|  / _ \  |  _ \  " ${endColour}
echo -e ${redColour}" |  _|   \ \/ / | __| |  __|  / _\ |  / __|   | |   | | | | | |_) | " ${endColour}
echo -e ${redColour}" | |___   >  <  | |_  | |    | (_| | | (__    | |   | |_| | |  _ <  " ${endColour}
echo -e ${redColour}" |_____| /_/\_\  \__| |_|     \__/_|  \___|   |_|    \___/  |_| \_\ " ${endColour}
echo -e "\n"
echo -e ${yellowColour} "[*] Author       ${endColour}${grayColour}: Cl4r4_22" ${endColour}
echo -e ${yellowColour} "[*] Version      ${endColour}${grayColour}: 1.0 (first release) " ${endColour}
echo -e ${yellowColour} "[*] Last modify  ${endColour}${grayColour}: 2022/09/18 \n" ${endColour}
for i in {1..90}; do echo -ne ${grayColour}"~"${endColour}; done
echo -e "\n"
tick=✔
cross=✘

#Verificación de la instalación de la herramienta 'wkhtmltopdf' - Es importante descargarla anteriormente para el mejor funcionamiento del script
function inst_wkhtmltopdf() {
program=wkhtmltopdf

	echo -e ${yellowColour}"...Verifying ${program} installation..."${endColour}
        test -f /usr/bin/${program}
        if [ "$(echo $?)" == "0" ]; then
                echo -e ${greenColour}"\t[${tick}]"${endColour}${grayColour} "${program} is installed! \n" ${endColour}
        else
                echo -e ${redColour}"\t[${cross}]"${endColour}${grayColour} "${program} is not installed! "${endColour}
                echo -e ${redColour}"ERROR MESSAGE:"${endColour}
                echo -e ${yellowColour}"[*]"${endColour}${grayColour} "...Go to https://github.com/wkhtmltopdf/wkhtmltopdf to install ${program}..." ${endColour}
                exit 0
        fi
}

#Verificación e instalación del comando 'lynx' para navegar en Internet
function inst_lynx() {
program=lynx

	echo -e ${yellowColour}"...Verifying ${program} installation..."${endColour}
        test -f /usr/bin/${program}
        if [ "$(echo $?)" == "0" ]; then
                echo -e ${greenColour}"\t[${tick}]"${endColour}${grayColour} "${program} is installed! \n" ${endColour}
        else
                echo -e ${redColour}"\t[${cross}]"${endColour}${grayColour} "${program} is not installed! "${endColour}
                echo -e ${yellowColour}"[*]"${endColour}${grayColour} "...Installing tool..." ${endColour}
                sudo apt install $program -y 1>/dev/null
                if [ "$(echo $?)" == "0" ]; then
                        echo -e ${greenColour}"\t[${tick}]"${endColour}${grayColour} "${program} is installed! \n"${endColour}
                else
                        echo -e ${redColour}"ERROR MESSAGE:"${endColour}
                        echo -e "\t${redColour}[${cross}]${endColour}"${grayColour}"${program} could not be installed"${endColour}
                        exit 0
                fi
        fi
}

#Verificación e instalación de la herramienta 'html2text' - Para convertir archivos 'html' a 'txt'
function parse_html() {

	local program=html2text
	echo -e ${yellowColour}"...Verifying tool installation..."${endColour}
	test -f /usr/bin/${program}
	if [ "$(echo $?)" == "0" ]; then
    		echo -e ${greenColour}"\t[${tick}]"${endColour}${grayColour} "${program} is installed! \n" ${endColour}
	else
         	echo -e ${redColour}"\t[${cross}]"${endColour}${grayColour} "${program} is not installed! "${endColour}
          	echo -e ${yellowColour}"[*]"${endColour}${grayColour} "...Installing tool..." ${endColour}
	        sudo apt install $program -y 1>/dev/null
		if [ "$(echo $?)" == "0" ]; then
	     		echo -e ${greenColour}"\t[${tick}]"${endColour}${grayColour} "${program} is installed! \n"${endColour}
		else
			echo -e ${redColour}"ERROR MESSAGE:"${endColour}
		        echo -e "\t${redColour}[${cross}]${endColour}"${grayColour}"${program} could not be installed"${endColour}
		        exit 0
		fi
	fi
}

#Verificación e instalación de 'torsocks' - Para navegar a través de Tor por la consola
function active_tor() {
program=torsocks
	echo -e ${yellowColour}"...Verifying ${program} installation..."${endColour}
        test -f /usr/bin/${program}
        if [ "$(echo $?)" == "0" ]; then
                echo -e ${greenColour}"\t[${tick}]"${endColour}${grayColour} "${program} is installed! \n" ${endColour}
        else
                echo -e ${redColour}"\t[${cross}]"${endColour}${grayColour} "${program} is not installed! "${endColour}
                echo -e ${yellowColour}"[*]"${endColour}${grayColour} "...Installing tool..." ${endColour}
                sudo apt install $program -y 1>/dev/null
                if [ "$(echo $?)" == "0" ]; then
                        echo -e ${greenColour}"\t[${tick}]"${endColour}${grayColour} "${program} is installed! \n"${endColour}
                else
                        echo -e ${redColour}"ERROR MESSAGE:"${endColour}
                        echo -e "\t${redColour}[${cross}]${endColour}"${grayColour}"${program} could not be installed"${endColour}
                        exit 0
                fi
        fi
#Activación de TOR
echo -e ${yellowColour}"...Starting the Tor Service..."${endColour}
service tor start
. torsocks on
}

#Creación del directorio de destino y de la subcarpeta 'screenshot' para guardar las capturas de pantalla
function create_directory() {
echo -e "\n"
	echo -ne ${yellowColour}"[-]"${endColour}${grayColour} "Write the name of your directory: "${endColour}
 	read dir
	if [ -d ${dir}_extraction ]
	then
		echo -e "\n"
		echo -e ${redColour}"ERROR MESSAGE:"${endColour}
		echo -e "\t${redColour}"[${cross}]"${endColour}"${grayColour} "<${dir}_extraction> already exists"${endColour}
		exit 0
	else
		mkdir ${dir}_extraction
		mkdir ${dir}_extraction/screenshot
		screenshot="${dir}_extraction/screenshot"
		echo -e "\n"
	fi
}

#Extracción de las direcciones .onion V3 y ejecución de los 'screenshots' de las primeras páginas web de Markets, Shops y Stores en el buscador 'Ahmia'
function screenshot() {
url="https://ahmia.fi/search/?q=stores%2C+shop%2C+market"
output1="ahmia_output"
output2="links_output"
echo -e ${blueColour}"...Wait...TorLinks are coming..."${endColour}
lynx -dump ${url} > ${dir}_extraction/${output1}
cat ${dir}_extraction/${output1} | grep -i 'references' -A40 | grep '.onion' | cut -d "=" -f 3- > ${dir}_extraction/${output2}
echo -e ${greenColour}"\t[${tick}]"${endColour}${grayColour} "TorLinks extracted! \n"${endColour}

datenow=$(date +%Y%m%d)
x=0
echo -e ${blueColour}"...Wait...I'm working on screenshots..."${endColour}
while read -r i;do
	 let "x+=1"
	 wkhtmltopdf $i ${screenshot}/screenshot_${datenow}_${x}.pdf 2>/dev/null
         echo -e ${turquoiseColour}"\t[*]"${endColour}${grayColour} "Screenshot for ${i}" ${endColour}
done <<< $(cat ${dir}_extraction/${output2})
}

#Extracción de los títulos de cada página web seleccionada
function title() {
datenow=$(date +%Y%m%d)
output2="links_output"
output3="title_output"
echo -e "\n"
echo -e ${blueColour}"...Wait...I'm extracting the title..."${endColour}
touch ${dir}_extraction/${output3}.html
echo "==========================================================="
echo "Document: Title Extractions" >> ${dir}_extraction/${output3}.html
echo "Date: ${datenow}" >> ${dir}_extraction/${output3}.html
echo "==========================================================="
echo -e "\n"
while read -r i;do
	 echo "-------------------------------------------------" >> ${dir}_extraction/${output3}.html
	 echo "URL:$i" >> ${dir}_extraction/${output3}.html
	 curl $i 1>/dev/null 2>/dev/null
	 if [ "$(echo $?)" == "0" ]; then
      		echo -e ${greenColour}"\t[${tick}]"${endColour}${grayColour} "Searching on "$i"" ${endColour}
		curl $i | grep -oE "<title>.*</title>" | sed 's/<title>//' | sed 's/<\/title>//' >> ${dir}_extraction/${output3}.html 2>/dev/null
		if [ "$(echo $?)" == "0" ]; then
			echo -e ${greenColour}"\t[${tick}]"${endColour}${grayColour} "Title extraction done! \n" ${endColour}
		else
			echo -e ${redColour}"ERROR MESSAGE: title not found"${endColour}
			echo "********ERROR MESSAGE: title not found" >> ${dir}_extraction/${output3}.html
		fi
	 else
                echo -e ${redColour}"ERROR MESSAGE: timeout search"${endColour}
                echo "********ERROR MESSAGE: timeout search" >> ${dir}_extraction/${output3}.html
         fi

done <<< $(cat ${dir}_extraction/${output2})

}


#Convertir el fichero 'html' con la extracción de los títulos, en un fichero 'txt'
function convertHtml() {
	local output4=titles
	html2text -width 10000 ${dir}_extraction/${output3}.html > ${dir}_extraction/${output4}.txt
	#rm account_activity.html


	echo -e ${greenColour}"[${tick}]""...........EXPORT DONE IT!............." ${endColour}
}




#Ejecución de todas las funciones anteriores si se ejecuta el comando 'sudo ./extractor'
if [ "$(id -u)" == "0" ]; then

	inst_wkhtmltopdf
	inst_lynx
	parse_html
	active_tor
	create_directory
	screenshot
	title
	convertHtml
else
        echo -e ${redColour}"\n[${cross}]"${endColour}${grayColour}"You aren't ROOT \n"${endColour}
fi
